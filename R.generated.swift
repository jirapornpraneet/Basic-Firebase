//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 23 images.
  struct image {
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `girl`.
    static let girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "girl")
    /// Image `ic_account_outline`.
    static let ic_account_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_account_outline")
    /// Image `ic_account`.
    static let ic_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_account")
    /// Image `ic_camera_outline`.
    static let ic_camera_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_outline")
    /// Image `ic_camera`.
    static let ic_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera")
    /// Image `ic_chat`.
    static let ic_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat")
    /// Image `ic_heart_outline`.
    static let ic_heart_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart_outline")
    /// Image `ic_heart`.
    static let ic_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart")
    /// Image `ic_history`.
    static let ic_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_history")
    /// Image `ic_home_outline`.
    static let ic_home_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_outline")
    /// Image `ic_home`.
    static let ic_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home")
    /// Image `ic_phone`.
    static let ic_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone")
    /// Image `ic_search_outline`.
    static let ic_search_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_outline")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_settings`.
    static let ic_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings")
    /// Image `ic_star`.
    static let ic_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star")
    /// Image `icon_email`.
    static let icon_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_email")
    /// Image `icon_eye_red`.
    static let icon_eye_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_red")
    /// Image `icon_eye_white`.
    static let icon_eye_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_white")
    /// Image `icon_gender`.
    static let icon_gender = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gender")
    /// Image `icon_password`.
    static let icon_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_password")
    /// Image `icon_user`.
    static let icon_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user")
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "girl", bundle: ..., traitCollection: ...)`
    static func girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girl, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_account", bundle: ..., traitCollection: ...)`
    static func ic_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_account, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_account_outline", bundle: ..., traitCollection: ...)`
    static func ic_account_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_account_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera", bundle: ..., traitCollection: ...)`
    static func ic_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera_outline", bundle: ..., traitCollection: ...)`
    static func ic_camera_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chat", bundle: ..., traitCollection: ...)`
    static func ic_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_heart", bundle: ..., traitCollection: ...)`
    static func ic_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_heart_outline", bundle: ..., traitCollection: ...)`
    static func ic_heart_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_history", bundle: ..., traitCollection: ...)`
    static func ic_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_history, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_home", bundle: ..., traitCollection: ...)`
    static func ic_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_home_outline", bundle: ..., traitCollection: ...)`
    static func ic_home_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_phone", bundle: ..., traitCollection: ...)`
    static func ic_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_outline", bundle: ..., traitCollection: ...)`
    static func ic_search_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_settings", bundle: ..., traitCollection: ...)`
    static func ic_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star", bundle: ..., traitCollection: ...)`
    static func ic_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_email", bundle: ..., traitCollection: ...)`
    static func icon_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eye_red", bundle: ..., traitCollection: ...)`
    static func icon_eye_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eye_white", bundle: ..., traitCollection: ...)`
    static func icon_eye_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_gender", bundle: ..., traitCollection: ...)`
    static func icon_gender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gender, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_password", bundle: ..., traitCollection: ...)`
    static func icon_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_user", bundle: ..., traitCollection: ...)`
    static func icon_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<AccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `MainTabBar`.
      static let mainTabBar: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "MainTabBar")
      
      /// Optionally returns a typed version of segue `MainTabBar`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func mainTabBar(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.mainTabBar, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TabBarViewController`, and contains static references to 5 segues.
    struct tabBarViewController {
      /// Segue identifier `Account`.
      static let account: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TabBarViewController, AccountViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Account")
      /// Segue identifier `Camera`.
      static let camera: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TabBarViewController, CameraViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Camera")
      /// Segue identifier `Heart`.
      static let heart: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TabBarViewController, FeedViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Heart")
      /// Segue identifier `HomeViewController`.
      static let homeViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TabBarViewController, HomeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "HomeViewController")
      /// Segue identifier `Search`.
      static let search: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TabBarViewController, SearchViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Search")
      
      /// Optionally returns a typed version of segue `Account`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func account(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TabBarViewController, AccountViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tabBarViewController.account, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Camera`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func camera(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TabBarViewController, CameraViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tabBarViewController.camera, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Heart`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func heart(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TabBarViewController, FeedViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tabBarViewController.heart, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `HomeViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func homeViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TabBarViewController, HomeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tabBarViewController.homeViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Search`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func search(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TabBarViewController, SearchViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tabBarViewController.search, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 19 localization keys.
    struct localizable {
      /// Base translation: Account
      /// 
      /// Locales: th, Base
      static let account = Rswift.StringResource(key: "Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Camera
      /// 
      /// Locales: th, Base
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: th, Base
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Do you want to log out?
      /// 
      /// Locales: th, Base
      static let doYouWantToLogOut = Rswift.StringResource(key: "Do you want to log out?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: th, Base
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Feed
      /// 
      /// Locales: th, Base
      static let feed = Rswift.StringResource(key: "Feed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Home
      /// 
      /// Locales: th, Base
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Log in
      /// 
      /// Locales: th, Base
      static let logIn = Rswift.StringResource(key: "Log in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Log out
      /// 
      /// Locales: th, Base
      static let logOut = Rswift.StringResource(key: "Log out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: OK
      /// 
      /// Locales: th, Base
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Password reset email sent
      /// 
      /// Locales: th, Base
      static let passwordResetEmailSent = Rswift.StringResource(key: "Password reset email sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Profile
      /// 
      /// Locales: th, Base
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Register
      /// 
      /// Locales: th, Base
      static let register = Rswift.StringResource(key: "Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Saved
      /// 
      /// Locales: th, Base
      static let saved = Rswift.StringResource(key: "Saved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Search
      /// 
      /// Locales: th, Base
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Something wrong!
      /// 
      /// Locales: th, Base
      static let somethingWrong = Rswift.StringResource(key: "Something wrong!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Sorry
      /// 
      /// Locales: th, Base
      static let sorry = Rswift.StringResource(key: "Sorry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Success
      /// 
      /// Locales: th, Base
      static let success = Rswift.StringResource(key: "Success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Your image has been saved
      /// 
      /// Locales: th, Base
      static let yourImageHasBeenSaved = Rswift.StringResource(key: "Your image has been saved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      
      /// Base translation: Account
      /// 
      /// Locales: th, Base
      static func account(_: Void = ()) -> String {
        return NSLocalizedString("Account", bundle: R.hostingBundle, value: "Account", comment: "")
      }
      
      /// Base translation: Camera
      /// 
      /// Locales: th, Base
      static func camera(_: Void = ()) -> String {
        return NSLocalizedString("Camera", bundle: R.hostingBundle, value: "Camera", comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: th, Base
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, value: "Cancel", comment: "")
      }
      
      /// Base translation: Do you want to log out?
      /// 
      /// Locales: th, Base
      static func doYouWantToLogOut(_: Void = ()) -> String {
        return NSLocalizedString("Do you want to log out?", bundle: R.hostingBundle, value: "Do you want to log out?", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: th, Base
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("Error", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: Feed
      /// 
      /// Locales: th, Base
      static func feed(_: Void = ()) -> String {
        return NSLocalizedString("Feed", bundle: R.hostingBundle, value: "Feed", comment: "")
      }
      
      /// Base translation: Home
      /// 
      /// Locales: th, Base
      static func home(_: Void = ()) -> String {
        return NSLocalizedString("Home", bundle: R.hostingBundle, value: "Home", comment: "")
      }
      
      /// Base translation: Log in
      /// 
      /// Locales: th, Base
      static func logIn(_: Void = ()) -> String {
        return NSLocalizedString("Log in", bundle: R.hostingBundle, value: "Log in", comment: "")
      }
      
      /// Base translation: Log out
      /// 
      /// Locales: th, Base
      static func logOut(_: Void = ()) -> String {
        return NSLocalizedString("Log out", bundle: R.hostingBundle, value: "Log out", comment: "")
      }
      
      /// Base translation: OK
      /// 
      /// Locales: th, Base
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", bundle: R.hostingBundle, value: "OK", comment: "")
      }
      
      /// Base translation: Password reset email sent
      /// 
      /// Locales: th, Base
      static func passwordResetEmailSent(_: Void = ()) -> String {
        return NSLocalizedString("Password reset email sent", bundle: R.hostingBundle, value: "Password reset email sent", comment: "")
      }
      
      /// Base translation: Profile
      /// 
      /// Locales: th, Base
      static func profile(_: Void = ()) -> String {
        return NSLocalizedString("Profile", bundle: R.hostingBundle, value: "Profile", comment: "")
      }
      
      /// Base translation: Register
      /// 
      /// Locales: th, Base
      static func register(_: Void = ()) -> String {
        return NSLocalizedString("Register", bundle: R.hostingBundle, value: "Register", comment: "")
      }
      
      /// Base translation: Saved
      /// 
      /// Locales: th, Base
      static func saved(_: Void = ()) -> String {
        return NSLocalizedString("Saved", bundle: R.hostingBundle, value: "Saved", comment: "")
      }
      
      /// Base translation: Search
      /// 
      /// Locales: th, Base
      static func search(_: Void = ()) -> String {
        return NSLocalizedString("Search", bundle: R.hostingBundle, value: "Search", comment: "")
      }
      
      /// Base translation: Something wrong!
      /// 
      /// Locales: th, Base
      static func somethingWrong(_: Void = ()) -> String {
        return NSLocalizedString("Something wrong!", bundle: R.hostingBundle, value: "Something wrong!", comment: "")
      }
      
      /// Base translation: Sorry
      /// 
      /// Locales: th, Base
      static func sorry(_: Void = ()) -> String {
        return NSLocalizedString("Sorry", bundle: R.hostingBundle, value: "Sorry", comment: "")
      }
      
      /// Base translation: Success
      /// 
      /// Locales: th, Base
      static func success(_: Void = ()) -> String {
        return NSLocalizedString("Success", bundle: R.hostingBundle, value: "Success", comment: "")
      }
      
      /// Base translation: Your image has been saved
      /// 
      /// Locales: th, Base
      static func yourImageHasBeenSaved(_: Void = ()) -> String {
        return NSLocalizedString("Your image has been saved", bundle: R.hostingBundle, value: "Your image has been saved", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 43 localization keys.
    struct main {
      /// th translation: 00000000
      /// 
      /// Locales: th
      static let sx2DpFpXText = Rswift.StringResource(key: "SX2-dp-fpX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: 00000000
      /// 
      /// Locales: th
      static let v2WMZB1kText = Rswift.StringResource(key: "v2W-MZ-b1k.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: 00000000
      /// 
      /// Locales: th
      static let vfH431KKText = Rswift.StringResource(key: "vfH-43-1KK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: DD/MM/YYYY
      /// 
      /// Locales: th
      static let xuv1TJmbText = Rswift.StringResource(key: "XUV-1T-jmb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ชื่อ
      /// 
      /// Locales: th
      static let egU8OhUText = Rswift.StringResource(key: "3eg-U8-OhU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ชื่อ
      /// 
      /// Locales: th
      static let lmoBB6mzPlaceholder = Rswift.StringResource(key: "Lmo-BB-6mz.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ชื่อ
      /// 
      /// Locales: th
      static let ygpefNbiText = Rswift.StringResource(key: "YGP-eF-Nbi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ถ่ายรูป
      /// 
      /// Locales: th
      static let gFzYmTBbNormalTitle = Rswift.StringResource(key: "gFz-ym-TBb.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: นามสกุล
      /// 
      /// Locales: th
      static let aeMDLF5HText = Rswift.StringResource(key: "AeM-DL-f5H.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: นามสกุล
      /// 
      /// Locales: th
      static let cirRRYTJPlaceholder = Rswift.StringResource(key: "Cir-rR-yTJ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: นามสกุล
      /// 
      /// Locales: th
      static let e1AqJcVText = Rswift.StringResource(key: "4E1-aq-jcV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: บันทึก
      /// 
      /// Locales: th
      static let uKxV7V6ZNormalTitle = Rswift.StringResource(key: "UKx-V7-v6Z.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: บันทึกรูปภาพ
      /// 
      /// Locales: th
      static let d5TPwSWQNormalTitle = Rswift.StringResource(key: "d5T-pw-SWQ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ยอดคงเหลือ
      /// 
      /// Locales: th
      static let duqGyCL3Text = Rswift.StringResource(key: "DUQ-Gy-cL3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ยืนยันรหัสผ่าน
      /// 
      /// Locales: th
      static let lQ9QlFlNText = Rswift.StringResource(key: "lQ9-Ql-FlN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ยืนยันรหัสผ่าน
      /// 
      /// Locales: th
      static let yyfKk7j8Placeholder = Rswift.StringResource(key: "YYF-kk-7j8.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: รหัสผ่าน
      /// 
      /// Locales: th
      static let cyHNWFvmPlaceholder = Rswift.StringResource(key: "CyH-NW-Fvm.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: รหัสผ่าน
      /// 
      /// Locales: th
      static let pQpBBMRbPlaceholder = Rswift.StringResource(key: "pQp-bB-mRb.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: รหัสผ่าน
      /// 
      /// Locales: th
      static let s4B2TcaText = Rswift.StringResource(key: "0S4-b2-tca.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: รายจ่าย
      /// 
      /// Locales: th
      static let dkLXs7xDText = Rswift.StringResource(key: "dkL-Xs-7xD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: รายจ่าย
      /// 
      /// Locales: th
      static let uy9YLQYDText = Rswift.StringResource(key: "uy9-YL-qYD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: รายรับ
      /// 
      /// Locales: th
      static let pwpFjG36Text = Rswift.StringResource(key: "Pwp-Fj-g36.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: รายรับ
      /// 
      /// Locales: th
      static let x0u2cSa8Text = Rswift.StringResource(key: "x0u-2c-sa8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ลงทะเบียน
      /// 
      /// Locales: th
      static let tpfEVGuVNormalTitle = Rswift.StringResource(key: "Tpf-eV-guV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ลงทะเบียน
      /// 
      /// Locales: th
      static let weeUkYoUNormalTitle = Rswift.StringResource(key: "Wee-uk-yoU.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ลืมรหัสผ่าน?
      /// 
      /// Locales: th
      static let aaa4UtZNormalTitle = Rswift.StringResource(key: "7AA-A4-utZ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: ออกสู่ระบบ
      /// 
      /// Locales: th
      static let jygJFVjoTitle = Rswift.StringResource(key: "Jyg-JF-vjo.title", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: อัพโหลดรูปภาพประจำตัว
      /// 
      /// Locales: th
      static let x8eLeUDONormalTitle = Rswift.StringResource(key: "X8e-le-uDO.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static let jXlYPCRNText = Rswift.StringResource(key: "jXl-YP-cRN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static let nZcTwVuXPlaceholder = Rswift.StringResource(key: "nZc-Tw-VuX.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static let pc2gBgmPlaceholder = Rswift.StringResource(key: "4Pc-2g-Bgm.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static let xxoBuLgvPlaceholder = Rswift.StringResource(key: "xxo-Bu-lgv.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static let zc24OText = Rswift.StringResource(key: "674-Zc-24O.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เข้าสู่ระบบ
      /// 
      /// Locales: th
      static let mA4Uc8kjTitle = Rswift.StringResource(key: "mA4-uc-8kj.title", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เข้าสู่ระบบ
      /// 
      /// Locales: th
      static let uYVnN34Text = Rswift.StringResource(key: "6uY-Vn-N34.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เข้าสู่ระบบ
      /// 
      /// Locales: th
      static let vLgReHyoNormalTitle = Rswift.StringResource(key: "vLg-Re-Hyo.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เปลี่ยนรหัสผ่าน
      /// 
      /// Locales: th
      static let ch8KUB8EText = Rswift.StringResource(key: "CH8-KU-B8E.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เปลี่ยนรหัสผ่าน
      /// 
      /// Locales: th
      static let izyCj2nANormalTitle = Rswift.StringResource(key: "izy-cj-2nA.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เพศ
      /// 
      /// Locales: th
      static let fasXs3TZText = Rswift.StringResource(key: "Fas-Xs-3TZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เพศ
      /// 
      /// Locales: th
      static let yt9VXLYYText = Rswift.StringResource(key: "YT9-vX-LYY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เพศชาย
      /// 
      /// Locales: th
      static let x8sI18vgSegmentTitles0 = Rswift.StringResource(key: "x8s-i1-8vg.segmentTitles[0]", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เพศหญิง
      /// 
      /// Locales: th
      static let x8sI18vgSegmentTitles1 = Rswift.StringResource(key: "x8s-i1-8vg.segmentTitles[1]", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เพิ่ม
      /// 
      /// Locales: th
      static let gbTBDWciTitle = Rswift.StringResource(key: "gbT-bD-Wci.title", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      
      /// th translation: 00000000
      /// 
      /// Locales: th
      static func sx2DpFpXText(_: Void = ()) -> String {
        return NSLocalizedString("SX2-dp-fpX.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: 00000000
      /// 
      /// Locales: th
      static func v2WMZB1kText(_: Void = ()) -> String {
        return NSLocalizedString("v2W-MZ-b1k.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: 00000000
      /// 
      /// Locales: th
      static func vfH431KKText(_: Void = ()) -> String {
        return NSLocalizedString("vfH-43-1KK.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: DD/MM/YYYY
      /// 
      /// Locales: th
      static func xuv1TJmbText(_: Void = ()) -> String {
        return NSLocalizedString("XUV-1T-jmb.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ชื่อ
      /// 
      /// Locales: th
      static func egU8OhUText(_: Void = ()) -> String {
        return NSLocalizedString("3eg-U8-OhU.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ชื่อ
      /// 
      /// Locales: th
      static func lmoBB6mzPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Lmo-BB-6mz.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ชื่อ
      /// 
      /// Locales: th
      static func ygpefNbiText(_: Void = ()) -> String {
        return NSLocalizedString("YGP-eF-Nbi.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ถ่ายรูป
      /// 
      /// Locales: th
      static func gFzYmTBbNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("gFz-ym-TBb.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: นามสกุล
      /// 
      /// Locales: th
      static func aeMDLF5HText(_: Void = ()) -> String {
        return NSLocalizedString("AeM-DL-f5H.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: นามสกุล
      /// 
      /// Locales: th
      static func cirRRYTJPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Cir-rR-yTJ.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: นามสกุล
      /// 
      /// Locales: th
      static func e1AqJcVText(_: Void = ()) -> String {
        return NSLocalizedString("4E1-aq-jcV.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: บันทึก
      /// 
      /// Locales: th
      static func uKxV7V6ZNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("UKx-V7-v6Z.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: บันทึกรูปภาพ
      /// 
      /// Locales: th
      static func d5TPwSWQNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("d5T-pw-SWQ.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ยอดคงเหลือ
      /// 
      /// Locales: th
      static func duqGyCL3Text(_: Void = ()) -> String {
        return NSLocalizedString("DUQ-Gy-cL3.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ยืนยันรหัสผ่าน
      /// 
      /// Locales: th
      static func lQ9QlFlNText(_: Void = ()) -> String {
        return NSLocalizedString("lQ9-Ql-FlN.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ยืนยันรหัสผ่าน
      /// 
      /// Locales: th
      static func yyfKk7j8Placeholder(_: Void = ()) -> String {
        return NSLocalizedString("YYF-kk-7j8.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: รหัสผ่าน
      /// 
      /// Locales: th
      static func cyHNWFvmPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("CyH-NW-Fvm.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: รหัสผ่าน
      /// 
      /// Locales: th
      static func pQpBBMRbPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("pQp-bB-mRb.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: รหัสผ่าน
      /// 
      /// Locales: th
      static func s4B2TcaText(_: Void = ()) -> String {
        return NSLocalizedString("0S4-b2-tca.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: รายจ่าย
      /// 
      /// Locales: th
      static func dkLXs7xDText(_: Void = ()) -> String {
        return NSLocalizedString("dkL-Xs-7xD.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: รายจ่าย
      /// 
      /// Locales: th
      static func uy9YLQYDText(_: Void = ()) -> String {
        return NSLocalizedString("uy9-YL-qYD.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: รายรับ
      /// 
      /// Locales: th
      static func pwpFjG36Text(_: Void = ()) -> String {
        return NSLocalizedString("Pwp-Fj-g36.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: รายรับ
      /// 
      /// Locales: th
      static func x0u2cSa8Text(_: Void = ()) -> String {
        return NSLocalizedString("x0u-2c-sa8.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ลงทะเบียน
      /// 
      /// Locales: th
      static func tpfEVGuVNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Tpf-eV-guV.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ลงทะเบียน
      /// 
      /// Locales: th
      static func weeUkYoUNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Wee-uk-yoU.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ลืมรหัสผ่าน?
      /// 
      /// Locales: th
      static func aaa4UtZNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("7AA-A4-utZ.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: ออกสู่ระบบ
      /// 
      /// Locales: th
      static func jygJFVjoTitle(_: Void = ()) -> String {
        return NSLocalizedString("Jyg-JF-vjo.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: อัพโหลดรูปภาพประจำตัว
      /// 
      /// Locales: th
      static func x8eLeUDONormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("X8e-le-uDO.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static func jXlYPCRNText(_: Void = ()) -> String {
        return NSLocalizedString("jXl-YP-cRN.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static func nZcTwVuXPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("nZc-Tw-VuX.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static func pc2gBgmPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("4Pc-2g-Bgm.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static func xxoBuLgvPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("xxo-Bu-lgv.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: อีเมล์
      /// 
      /// Locales: th
      static func zc24OText(_: Void = ()) -> String {
        return NSLocalizedString("674-Zc-24O.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เข้าสู่ระบบ
      /// 
      /// Locales: th
      static func mA4Uc8kjTitle(_: Void = ()) -> String {
        return NSLocalizedString("mA4-uc-8kj.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เข้าสู่ระบบ
      /// 
      /// Locales: th
      static func uYVnN34Text(_: Void = ()) -> String {
        return NSLocalizedString("6uY-Vn-N34.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เข้าสู่ระบบ
      /// 
      /// Locales: th
      static func vLgReHyoNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("vLg-Re-Hyo.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เปลี่ยนรหัสผ่าน
      /// 
      /// Locales: th
      static func ch8KUB8EText(_: Void = ()) -> String {
        return NSLocalizedString("CH8-KU-B8E.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เปลี่ยนรหัสผ่าน
      /// 
      /// Locales: th
      static func izyCj2nANormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("izy-cj-2nA.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เพศ
      /// 
      /// Locales: th
      static func fasXs3TZText(_: Void = ()) -> String {
        return NSLocalizedString("Fas-Xs-3TZ.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เพศ
      /// 
      /// Locales: th
      static func yt9VXLYYText(_: Void = ()) -> String {
        return NSLocalizedString("YT9-vX-LYY.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เพศชาย
      /// 
      /// Locales: th
      static func x8sI18vgSegmentTitles0(_: Void = ()) -> String {
        return NSLocalizedString("x8s-i1-8vg.segmentTitles[0]", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เพศหญิง
      /// 
      /// Locales: th
      static func x8sI18vgSegmentTitles1(_: Void = ()) -> String {
        return NSLocalizedString("x8s-i1-8vg.segmentTitles[1]", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เพิ่ม
      /// 
      /// Locales: th
      static func gbTBDWciTitle(_: Void = ()) -> String {
        return NSLocalizedString("gbT-bD-Wci.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let accountViewController = StoryboardViewControllerResource<AccountViewController>(identifier: "AccountViewController")
      let bundle = R.hostingBundle
      let cameraViewController = StoryboardViewControllerResource<CameraViewController>(identifier: "CameraViewController")
      let feedViewController = StoryboardViewControllerResource<FeedViewController>(identifier: "FeedViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let login = StoryboardViewControllerResource<LoginViewController>(identifier: "Login")
      let mainLoginNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "MainLoginNavigation")
      let mainTabBarNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "MainTabBarNavigation")
      let name = "Main"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      let singUp = StoryboardViewControllerResource<SingUpViewController>(identifier: "SingUp")
      let tabBar = StoryboardViewControllerResource<TabBarViewController>(identifier: "TabBar")
      
      func accountViewController(_: Void = ()) -> AccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountViewController)
      }
      
      func cameraViewController(_: Void = ()) -> CameraViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cameraViewController)
      }
      
      func feedViewController(_: Void = ()) -> FeedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedViewController)
      }
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func login(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      func mainLoginNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainLoginNavigation)
      }
      
      func mainTabBarNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarNavigation)
      }
      
      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }
      
      func singUp(_: Void = ()) -> SingUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: singUp)
      }
      
      func tabBar(_: Void = ()) -> TabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBar)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_email") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_email' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eye_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eye_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_user' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().mainLoginNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainLoginNavigation' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().cameraViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cameraViewController' could not be loaded from storyboard 'Main' as 'CameraViewController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().feedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedViewController' could not be loaded from storyboard 'Main' as 'FeedViewController'.") }
        if _R.storyboard.main().accountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountViewController' could not be loaded from storyboard 'Main' as 'AccountViewController'.") }
        if _R.storyboard.main().tabBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBar' could not be loaded from storyboard 'Main' as 'TabBarViewController'.") }
        if _R.storyboard.main().mainTabBarNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarNavigation' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Main' as 'SearchViewController'.") }
        if _R.storyboard.main().singUp() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'singUp' could not be loaded from storyboard 'Main' as 'SingUpViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
